<ul class="mb-20 space-y-3 list-none md:space-y-0" x-show="tab === 'profile'">
  <li class="hidden p-2 border border-gray-200 md:block md:py-4 md:mt-3 md:border-l-0 md:border-r-0">
    <div class="flex justify-center w-full" x-data="{ edit : false }">
      <%= turbo_stream_from "bio" %>
      <%= render partial: "components/bio/view", locals: { user: current_user } %>
    </div>
  </li>
  <li class="p-2 border border-gray-200 md:py-4 md:mt-3 md:border-l-0 md:border-r-0 md:border-t-0">
    <div class="flex justify-center w-full">
      <%= turbo_stream_from "specialty" %>
      <%= turbo_stream_from :specialties %>
      <%= render partial: "components/specialty/view", locals: { user: current_user } %>
    </div>
  </li>
  <li class="p-2 border border-gray-200 md:py-4 md:mt-3 md:border-l-0 md:border-r-0 md:border-t-0">
    <%= turbo_stream_from "experience" %>
    <%= render partial: "components/experience/view", locals: { user: current_user } %>
  </li>
  <li class="p-2 border border-gray-200 md:py-4 md:mt-3 md:border-l-0 md:border-r-0 md:border-t-0">
    <%= turbo_stream_from "service" %>
    <%= render partial: "components/service/view", locals: { user: current_user } %>
  </li>
  <li class="p-2 border border-gray-200 md:py-4 md:mt-3 md:border-l-0 md:border-r-0 md:border-t-0">
    <%= turbo_stream_from "education" %>
    <%= render partial: "components/education/view", locals: { user: current_user } %>
  </li>
  <li class="p-2 border border-gray-200 md:py-4 md:mt-3 md:border-l-0 md:border-r-0 md:border-t-0">
    <%= turbo_stream_from "social_medium" %>
    <%= render partial: "components/social_medium/view", locals: { user: current_user } %>
  </li>
</ul>
<script>
  function tagSelect() {
    return {
      open: false,
      textInput: '',
      tags: [],
      tagIds: [],
      removeTags: [],
      limit: 0,
      init() {
        this.tags = JSON.parse(this.$el.parentNode.getAttribute('data-tags'));
        this.tagIds = JSON.parse(this.$el.parentNode.getAttribute('data-tagIds'));
        this.limit = JSON.parse(this.$el.parentNode.getAttribute('data-limit'));
      },
      addTag(tag) {
        tag = tag.trim()
        if (this.limit > 0 && this.tags.length >= this.limit) {
        } else if (tag != "" && !this.hasTag(tag)) {
          this.tags.push(tag)
        }
        this.clearSearch()
        this.$refs.textInput.focus()
        this.fireTagsUpdateEvent()
      },
      fireTagsUpdateEvent() {
        this.$el.dispatchEvent(new CustomEvent('tags-update', {
          detail: { tags: this.tags, removeTags: this.removeTags },
          bubbles: true,
        }));
      },
      hasTag(tag) {
        var tag = this.tags.find(e => {
          return e.toLowerCase() === tag.toLowerCase()
        })
        return tag != undefined
      },
      removeTag(index) {
        if (this.tagIds[index] !== undefined) {
          this.removeTags.push(this.tagIds[index])
          this.tagIds.splice(index, 1)
        }
        this.tags.splice(index, 1)
        this.fireTagsUpdateEvent()
      },
      search(q) {
        if (q.includes(",")) {
          q.split(",").forEach(function (val) {
            this.addTag(val)
          }, this)
        }
        this.toggleSearch()
      },
      clearSearch() {
        this.textInput = ''
        this.toggleSearch()
      },
      toggleSearch() {
        this.open = this.textInput != ''
      },
      focusTag() {
        this.clearSearch()
        this.$refs.textInput.focus()
      }
    }
  }
</script>
