<!DOCTYPE html>
<html>
  <head>
    <%= render 'shared/head' %>
  </head>
  <body class="md-bg-gray-light">
    <div class="wrapper">
      <header class="w-full bg-white md:border-b h-15 dark:bg-gray-900 md:dark:border-gray-700">
        <nav class="px-4 py-3 mx-auto space-y-4 max-w-screen-2xl md:flex md:justify-between md:items-center md:space-y-0 md:space-x-10">
          <%= render "shared/logo" %>
        </nav>
      </header>
      <div class="flex flex-col justify-center w-screen antialiased md:pb-5 md:pt-5 h-screen-headless md:mb-5 sm:m-auto md-w-375">
        <div class="flex flex-col h-full p-4 space-y-6 bg-white md-min-h-590 md:shadow">
          <%= turbo_frame_tag "register_steps", class: "h-full" do %>
            <%= yield %>
          <% end %>
        </div>
      </div>
    </div>
    <script>
    function tagSelect() {
      return {
        open: false,
        textInput: '',
        tags: [],
        tagIds: [],
        removeTags: [],
        init() {
          this.tags = JSON.parse(this.$el.parentNode.getAttribute('data-tags'));
          this.tagIds = JSON.parse(this.$el.parentNode.getAttribute('data-tagIds'));
        },
        addTag(tag) {
          tag = tag.trim()
          if (tag != "" && !this.hasTag(tag)) {
            this.tags.push( tag )
          }
          this.clearSearch()
          this.$refs.textInput.focus()
          this.fireTagsUpdateEvent()
        },
        fireTagsUpdateEvent() {
          this.$el.dispatchEvent(new CustomEvent('tags-update', {
            detail: { tags: this.tags, removeTags: this.removeTags },
            bubbles: true,
          }));
        },
        hasTag(tag) {
          var tag = this.tags.find(e => {
            return e.toLowerCase() === tag.toLowerCase()
          })
          return tag != undefined
        },
        removeTag(index) {
          if (this.tagIds[index] !== undefined) {
            this.removeTags.push( this.tagIds[index] )
            this.tagIds.splice(index, 1)
          }
          this.tags.splice(index, 1)
          this.fireTagsUpdateEvent()
        },
        search(q) {
          if ( q.includes(",") ) {
            q.split(",").forEach(function(val) {
              this.addTag(val)
            }, this)
          }
          this.toggleSearch()
        },
        clearSearch() {
          this.textInput = ''
          this.toggleSearch()
        },
        toggleSearch() {
          this.open = this.textInput != ''
        },
        focusTag() {
          this.clearSearch()
          this.$refs.textInput.focus()
        }
      }
    }
  </script>
  </body>
</html>
