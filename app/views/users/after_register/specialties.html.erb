<div class="pb-10">
  <h1 class="mt-8 font-bold text-normal">What are you an expert at?  (Max 3)</h1>
</div>
<%= form_for(@user, :url => wizard_path, html: {method: :put, class: "h-full md:h-96 flex flex-wrap content-between"}) do |f| %>
  <%= render "devise/shared/error_messages", resource: @user %>
  <div class="flex flex-col w-full md:inline-flex md:flex-row md:items-center">
    <div class="block relative w-full">
      <div x-data @tags-update="console.log('tags updated', $event.detail.tags)" data-tags='[<%= @user.specialties.pluck(:name).map{|name| "\"#{name}\""}.join(',') %>]'>
        <div x-data="tagSelect()" x-init="init('parentEl')" @click.away="clearSearch()" @keydown.escape="clearSearch()">
          <div class="inline-block overflow-y-scroll relative px-4 w-full bg-white rounded border focus:border-gray-500" @keydown.enter.prevent="addTag(textInput)" @click.prevent="focusTag()">
            <div :class="[open ? 'block' : 'hidden']">
              <div class="absolute left-0 z-40 m-1 w-full">
                <div class="py-1 text-sm bg-white rounded border border-gray-300 shadow-lg">
                  <a @click.prevent="addTag(textInput)" class="block py-1 px-5 cursor-pointer hover:text-white hover:bg-indigo-600">Add specialty "<span class="font-semibold" x-text="textInput"></span>"</a>
                </div>
              </div>
            </div>
            <!-- selections -->
            <template x-for="(tag, index) in tags">
              <div class="inline-flex items-center m-1 text-sm text-white bg-blue-500 rounded">
                <input type="hidden" name="user[specialties_attributes][][name]" :value="tag" />
                <span class="mr-1 ml-2 max-w-xs leading-relaxed truncate" x-text="tag"></span>
                <button @click.prevent="removeTag(index)" class="inline-block w-6 h-8 text-white text-gray-500 align-middle hover:text-gray-600 focus:outline-none">
                  <svg class="mx-auto w-6 h-6 text-white fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#fff"><path fill-rule="evenodd" d="M15.78 14.36a1 1 0 0 1-1.42 1.42l-2.82-2.83-2.83 2.83a1 1 0 1 1-1.42-1.42l2.83-2.82L7.3 8.7a1 1 0 0 1 1.42-1.42l2.83 2.83 2.82-2.83a1 1 0 0 1 1.42 1.42l-2.83 2.83 2.83 2.82z"/></svg>
                </button>
              </div>
            </template>
            <div class="inline-flex items-center m-1 text-sm rounded" :class="{ hidden : tags.length >= 3 }">
              <input x-model="textInput" x-ref="textInput" @input="search($event.target.value)" class="inline-block py-2 w-full leading-tight text-gray-700 bg-white rounded focus:outline-none focus:shadow-outline" placeholder="i.e. Fades, Braids, Curly Hair">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <%= f.fields_for :specialties, @user.specialties do |specialty_form| %>
    <%= specialty_form.text_field :name, class: "hidden" %>
    <%= specialty_form.text_field :_destroy, class: "hidden", value: "1" %>
  <% end %>
  <div class="mt-48 w-full text-right actions">
    <%= link_to "Cancel", wizard_path(:final), class: "text-black text-blue-500 border border-transparent hover:border-blue-500 px-4 py-2 rounded-md md:text-sm  text-xs font-medium" %>
    <%= f.submit "Save", class: "text-black text-white bg-blue-500 hover:bg-blue-700 px-4 py-2 rounded-md text-sm font-medium" %>
  </div>
<% end %>
<script>
  function tagSelect() {
    return {
      open: false,
      textInput: '',
      tags: [],
      init() {
        this.tags = JSON.parse(this.$el.parentNode.getAttribute('data-tags'));
      },
      addTag(tag) {
        tag = tag.trim()
        if (this.tags.length >= 3) {
          console.log('You have already entered more than 3 skills')
        } else if (tag != "" && !this.hasTag(tag)) {
          this.tags.push( tag )
        }
        this.clearSearch()
        this.$refs.textInput.focus()
        this.fireTagsUpdateEvent()
      },
      fireTagsUpdateEvent() {
        this.$el.dispatchEvent(new CustomEvent('tags-update', {
          detail: { tags: this.tags },
          bubbles: true,
        }));
      },
      hasTag(tag) {
        var tag = this.tags.find(e => {
          return e.toLowerCase() === tag.toLowerCase()
        })
        return tag != undefined
      },
      removeTag(index) {
        this.tags.splice(index, 1)
        this.fireTagsUpdateEvent()
      },
      search(q) {
        if ( q.includes(",") ) {
          q.split(",").forEach(function(val) {
            this.addTag(val)
          }, this)
        }
        this.toggleSearch()
      },
      clearSearch() {
        this.textInput = ''
        this.toggleSearch()
      },
      toggleSearch() {
        this.open = this.textInput != ''
      },
      focusTag() {
        this.clearSearch()
        this.$refs.textInput.focus()
      }
    }
  }
</script>
