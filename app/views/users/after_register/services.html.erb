<div class="pb-4 md:pb-10">
  <h1 class="mt-8 font-bold text-normal">What services do you offer?</h1>
</div>
<%= form_for(@user, :url => wizard_path, html: {method: :put, class: "h-full md:h-96 flex flex-wrap content-between"}) do |f| %>
  <%= render "devise/shared/error_messages", resource: @user %>
  <div class="flex flex-col w-full md:inline-flex md:flex-row md:items-center">
    <div class="relative block w-full">
      <div x-data data-tags='[<%= @user.services.pluck(:name).map{|name| "\"#{name}\""}.join(',') %>]'
        data-tagIds='[<%= @user.services.pluck(:id).map{|id| "\"#{id}\""}.join(',') %>]'>
        <div x-data="tagSelect()" x-init="init('parentEl')" @click.away="clearSearch()" @keydown.escape="clearSearch()">
          <div class="relative w-full overflow-y-scroll" @keydown.enter.prevent="addTag(textInput)" @click.prevent="focusTag()">
            <div :class="[open ? 'block' : 'hidden']">
              <div class="absolute left-0 z-40 w-full p-1">
                <div class="py-1 text-sm bg-white border border-gray-300 rounded shadow-lg">
                  <a @click.prevent="addTag(textInput)" class="block px-5 py-1 cursor-pointer hover:text-white hover:bg-indigo-600">Add salon service "<span class="font-semibold" x-text="textInput"></span>"</a>
                </div>
              </div>
            </div>
            <div class="w-full p-1">
              <input x-model="textInput" x-ref="textInput" @input="search($event.target.value)" class="w-full p-2 leading-tight text-gray-700 bg-white border rounded focus:outline-none focus:shadow-outline" placeholder="i.e. Kids Cuts, Womens Cuts, Perms">
              <p class="my-2 text-sm text-gray-500">Seperate services with a comma</p>
            </div>
            <!-- selections -->
            <template x-for="(tag, index) in tags">
              <div class="inline-flex items-center m-1 text-sm text-gray-500 bg-white border border-gray-200 rounded-full">
                <input type="hidden" name="user[services_attributes][][id]" />
                <input type="hidden" name="user[services_attributes][][name]" :value="tag" />
                <input type="hidden" name="user[services_attributes][][_destroy]" />
                <span class="max-w-xs ml-2 mr-1 leading-relaxed truncate" x-text="tag"></span>
                <button @click.prevent="removeTag(index)" class="inline-block w-6 h-8 text-gray-500 align-middle hover:text-gray-600 focus:outline-none">
                  <svg class="w-6 h-6 mx-auto text-gray-200 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#fff"><path fill-rule="evenodd" d="M15.78 14.36a1 1 0 0 1-1.42 1.42l-2.82-2.83-2.83 2.83a1 1 0 1 1-1.42-1.42l2.83-2.82L7.3 8.7a1 1 0 0 1 1.42-1.42l2.83 2.83 2.82-2.83a1 1 0 0 1 1.42 1.42l-2.83 2.83 2.83 2.82z"/></svg>
                </button>
              </div>
            </template>
            <template x-for="(tag, index) in removeTags">
              <input type="hidden" name="user[services_attributes][][id]" :value="tag" />
              <input type="hidden" name="user[services_attributes][][_destroy]" value="true" />
            </template>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="w-full text-right actions">
    <%= link_to "Cancel", wizard_path(:final), class: "text-black text-gray-500 px-4 py-2 rounded-md text-sm font-medium" %>
    <%= f.submit "Save", class: "text-black text-white bg-blue-500 hover:bg-blue-700 px-4 py-2 rounded-md text-sm font-medium" %>
  </div>
<% end %>
<script>
  function tagSelect() {
    return {
      open: false,
      textInput: '',
      tags: [],
      tagIds: [],
      removeTags: [],
      init() {
        this.tags = JSON.parse(this.$el.parentNode.getAttribute('data-tags'));
        this.tagIds = JSON.parse(this.$el.parentNode.getAttribute('data-tagIds'));
      },
      addTag(tag) {
        tag = tag.trim()
        if (tag != "" && !this.hasTag(tag)) {
          this.tags.push( tag )
        }
        this.clearSearch()
        this.$refs.textInput.focus()
        this.fireTagsUpdateEvent()
      },
      fireTagsUpdateEvent() {
        this.$el.dispatchEvent(new CustomEvent('tags-update', {
          detail: { tags: this.tags },
          bubbles: true,
        }));
      },
      hasTag(tag) {
        var tag = this.tags.find(e => {
          return e.toLowerCase() === tag.toLowerCase()
        })
        return tag != undefined
      },
      removeTag(index) {
        if (this.tagIds[index] !== undefined) {
          this.removeTags.push( this.tagIds[index] )
        }
        this.tags.splice(index, 1)
        this.fireTagsUpdateEvent()
      },
      search(q) {
        if ( q.includes(",") ) {
          q.split(",").forEach(function(val) {
            this.addTag(val)
          }, this)
        }
        this.toggleSearch()
      },
      clearSearch() {
        this.textInput = ''
        this.toggleSearch()
      },
      toggleSearch() {
        this.open = this.textInput != ''
      },
      focusTag() {
        this.clearSearch()
        this.$refs.textInput.focus()
      }
    }
  }
</script>
